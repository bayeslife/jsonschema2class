{{#if enum}}
public enum {{title}}  {
  {{#each enum}}
    {{this}}("{{this}}"),
  {{/each}};

	private final String value;
	private final static Map<String, {{title}}> CONSTANTS = new HashMap<String, {{title}}>();

	static {
        for ({{title}} c: values()) {
            CONSTANTS.put(c.value, c);
        }
	}

	private {{title}}(String value) {
	   this.value = value;
	}

	@Override
	public String toString() {
		return this.value;
	}

    @JsonCreator
    public static {{title}} fromValue(String value) {
        {{title}} constant = CONSTANTS.get(value);
        if (constant == null) {
            throw new IllegalArgumentException(value);
        } else {
            return constant;
        }
    }

 }
{{else}}
public class  {{title}}  {

    {{#each properties}}
    /* @param {{@key}}
      {{description}}
    */
     {{#if pattern}}
     @Pattern(regexp = "{{{escape pattern}}}")
     {{/if}}
     @JsonProperty("{{@key}}")
     private {{{javaPropertyType this}}} {{@key}} = {{{javaPropertyInitializer this}}};
    {{/each}}

    {{#each properties}}
      @XmlElement(required = {{required this ..}})
      @JsonProperty(required = {{required this ..}})
      public {{{javaPropertyType this}}} get{{methodCase @key}}(){
        return {{@key}};
      }

      public void set{{methodCase @key}}( {{{javaPropertyType this}}} t{{@key}} ) {
        this.{{@key}} = t{{@key}};
      }

    {{/each}}
  }
  {{/if}}
